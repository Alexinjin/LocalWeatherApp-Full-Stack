{"ast":null,"code":"var _jsxFileName = \"/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WeatherForm/WeatherForm.js\";\nimport React, { Component } from 'react';\nimport { Chart, Line, Axis } from 'bizcharts';\nimport ForCastComponent from '../WeatherForeCast/ForeCastComponent/ForCastComponent';\nimport WeatherIcon from \"../WeatherIcon/WeatherIcon\";\nimport * as styles from './WeatherForm.module.css';\n\nclass WeatherForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tempUnitHandler = isMetric => {\n      if (isMetric) {\n        this.setState({\n          currentHighestTemp: Math.round((this.state.currentHighestTemp - 32) * 5 / 9)\n        });\n      } else {\n        this.setState({\n          currentHighestTemp: Math.round(this.state.currentHighestTemp * 9 / 5 + 32)\n        });\n      }\n\n      ;\n    };\n\n    this.tempChartHandler = isMetric => {\n      let newTempChart = [];\n      this.state.currentWeatherData.map(data => {\n        let temp = data.temperature;\n\n        if (!isMetric) {\n          temp = Math.round(data.temperature * 9 / 5 + 32);\n        } else {\n          temp = Math.round((data.temperature - 32) * 5 / 9);\n        }\n\n        newTempChart.push({\n          hour: data.hour,\n          city: data.city,\n          temperature: temp\n        });\n      });\n      this.setState({\n        currentWeatherData: [...newTempChart]\n      });\n    };\n\n    this.switchButtonToMetric = () => {\n      if (!this.state.isMetric) {\n        this.setState({\n          isMetric: true\n        });\n        this.tempChartHandler(this.state.isMetric);\n        this.tempUnitHandler(this.state.isMetric);\n        this.props.switchUnit(true);\n      }\n    };\n\n    this.switchButtonToFahrenheit = () => {\n      if (this.state.isMetric) {\n        this.setState({\n          isMetric: false\n        });\n        this.tempChartHandler(this.state.isMetric);\n        this.tempUnitHandler(this.state.isMetric);\n        this.props.switchUnit(false);\n      }\n    };\n\n    this.state = {\n      cityName: this.props.cityName,\n      wealtherInfo: this.props.wealtherInfo,\n      currentDate: this.props.currentDate,\n      currentHighestTemp: this.props.wealtherInfo[3].main.temp,\n      currentWeatherData: this.props.currentWeatherData,\n      iconType: this.props.iconType,\n      iconName: null,\n      pastDays: [-6, -5, -4, -3, -2, -1, 0],\n      isMetric: this.props.isMetric\n    };\n    this.tempUnitHandler = this.tempUnitHandler.bind(this);\n    this.tempChartHandler = this.tempChartHandler.bind(this);\n    this.switchButtonToMetric = this.switchButtonToMetric.bind(this);\n    this.switchButtonToFahrenheit = this.switchButtonToFahrenheit.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"Begining: \" + this.state.isMetric);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid mx-1 h-75 w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-left text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, this.state.cityName), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"text-left text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, this.state.currentDate), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      id: \"one\",\n      className: \"btn float-left\",\n      onClick: this.switchButtonToMetric,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, \"Fahrenheit\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn float-left\",\n      onClick: this.switchButtonToFahrenheit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, \"Cesium\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.currentWeatherWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(WeatherIcon, {\n      iconType: this.state.iconType,\n      iconSize: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: styles.currentTempature,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, this.state.currentHighestTemp), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.weatherTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      scale: {\n        temperature: {\n          min: 0\n        }\n      },\n      padding: [30, 20, 50, 40],\n      autoFit: true,\n      height: 320,\n      data: this.state.currentWeatherData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      shape: \"smooth\",\n      position: \"hour*temperature\",\n      color: \"city\",\n      label: \"temperature\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid w-100 pt-5 d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, this.state.pastDays.map(day => {\n      return /*#__PURE__*/React.createElement(ForCastComponent, {\n        key: day,\n        pastDay: day,\n        iconType: this.state.wealtherInfo[day + 6].weather[0].main,\n        iconSize: \"card-img-top \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 20\n        }\n      });\n    })));\n  }\n\n}\n\nexport default WeatherForm;","map":{"version":3,"sources":["/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WeatherForm/WeatherForm.js"],"names":["React","Component","Chart","Line","Axis","ForCastComponent","WeatherIcon","styles","WeatherForm","constructor","props","tempUnitHandler","isMetric","setState","currentHighestTemp","Math","round","state","tempChartHandler","newTempChart","currentWeatherData","map","data","temp","temperature","push","hour","city","switchButtonToMetric","switchUnit","switchButtonToFahrenheit","cityName","wealtherInfo","currentDate","main","iconType","iconName","pastDays","bind","componentDidMount","console","log","render","currentWeatherWrapper","currentTempature","weatherTable","min","day","weather"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,QAAkC,WAAlC;AACA,OAAOC,gBAAP,MAA6B,uDAA7B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,0BAAxB;;AAIA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAClCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAsBnBC,eAtBmB,GAsBAC,QAAD,IAAc;AAC9B,UAAIA,QAAJ,EAAc;AACZ,aAAKC,QAAL,CAAc;AACZC,UAAAA,kBAAkB,EAACC,IAAI,CAACC,KAAL,CAAW,CAAC,KAAKC,KAAL,CAAWH,kBAAX,GAAgC,EAAjC,IAAuC,CAAvC,GAAyC,CAApD;AADP,SAAd;AAEC,OAHH,MAGS;AACP,aAAKD,QAAL,CAAc;AACZC,UAAAA,kBAAkB,EAACC,IAAI,CAACC,KAAL,CAAW,KAAKC,KAAL,CAAWH,kBAAX,GAAgC,CAAhC,GAAkC,CAAlC,GAAsC,EAAjD;AADP,SAAd;AAED;;AAAA;AACF,KA9BkB;;AAAA,SA+BnBI,gBA/BmB,GA+BCN,QAAD,IAAc;AAC/B,UAAIO,YAAY,GAAG,EAAnB;AACA,WAAKF,KAAL,CAAWG,kBAAX,CAA8BC,GAA9B,CAAkCC,IAAI,IAAI;AACxC,YAAIC,IAAI,GAAGD,IAAI,CAACE,WAAhB;;AACA,YAAI,CAACZ,QAAL,EAAe;AACbW,UAAAA,IAAI,GAAGR,IAAI,CAACC,KAAL,CAAYM,IAAI,CAACE,WAAL,GAAmB,CAAnB,GAAqB,CAAtB,GAA2B,EAAtC,CAAP;AACD,SAFD,MAEO;AACLD,UAAAA,IAAI,GAAGR,IAAI,CAACC,KAAL,CAAW,CAACM,IAAI,CAACE,WAAL,GAAmB,EAApB,IAA0B,CAA1B,GAA4B,CAAvC,CAAP;AACD;;AACDL,QAAAA,YAAY,CAACM,IAAb,CAAkB;AAChBC,UAAAA,IAAI,EAAEJ,IAAI,CAACI,IADK;AAEhBC,UAAAA,IAAI,EAAEL,IAAI,CAACK,IAFK;AAGhBH,UAAAA,WAAW,EAAED;AAHG,SAAlB;AAKD,OAZD;AAaA,WAAKV,QAAL,CAAc;AAACO,QAAAA,kBAAkB,EAAE,CAAC,GAAGD,YAAJ;AAArB,OAAd;AACD,KA/CkB;;AAAA,SAiDnBS,oBAjDmB,GAiDI,MAAM;AAC3B,UAAI,CAAC,KAAKX,KAAL,CAAWL,QAAhB,EAA0B;AACxB,aAAKC,QAAL,CAAc;AACZD,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGA,aAAKM,gBAAL,CAAsB,KAAKD,KAAL,CAAWL,QAAjC;AACA,aAAKD,eAAL,CAAqB,KAAKM,KAAL,CAAWL,QAAhC;AACA,aAAKF,KAAL,CAAWmB,UAAX,CAAsB,IAAtB;AACD;AACF,KA1DkB;;AAAA,SA4DnBC,wBA5DmB,GA4DQ,MAAM;AAC/B,UAAI,KAAKb,KAAL,CAAWL,QAAf,EAAyB;AACvB,aAAKC,QAAL,CAAc;AACZD,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGA,aAAKM,gBAAL,CAAsB,KAAKD,KAAL,CAAWL,QAAjC;AACA,aAAKD,eAAL,CAAqB,KAAKM,KAAL,CAAWL,QAAhC;AACA,aAAKF,KAAL,CAAWmB,UAAX,CAAsB,KAAtB;AACD;AACF,KArEkB;;AAEjB,SAAKZ,KAAL,GAAa;AACXc,MAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB,QADV;AAEXC,MAAAA,YAAY,EAAE,KAAKtB,KAAL,CAAWsB,YAFd;AAGXC,MAAAA,WAAW,EAAE,KAAKvB,KAAL,CAAWuB,WAHb;AAIXnB,MAAAA,kBAAkB,EAAE,KAAKJ,KAAL,CAAWsB,YAAX,CAAwB,CAAxB,EAA2BE,IAA3B,CAAgCX,IAJzC;AAKXH,MAAAA,kBAAkB,EAAE,KAAKV,KAAL,CAAWU,kBALpB;AAMXe,MAAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWyB,QANV;AAOXC,MAAAA,QAAQ,EAAE,IAPC;AAQXC,MAAAA,QAAQ,EAAE,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL,EAAO,CAAC,CAAR,EAAU,CAAC,CAAX,EAAa,CAAC,CAAd,EAAgB,CAAC,CAAjB,EAAmB,CAAnB,CARC;AASXzB,MAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE;AATV,KAAb;AAWA,SAAKD,eAAL,GAAuB,KAAKA,eAAL,CAAqB2B,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKpB,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBoB,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKV,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BU,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKR,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BQ,IAA9B,CAAmC,IAAnC,CAAhC;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAc,KAAKxB,KAAL,CAAWL,QAArC;AACD;;AAkDD8B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsC,KAAKzB,KAAL,CAAWc,QAAjD,CADF,eAEE;AAAI,MAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsC,KAAKd,KAAL,CAAWgB,WAAjD,CAFF,eAGE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,EAAE,EAAC,KAAzB;AAA+B,MAAA,SAAS,EAAC,gBAAzC;AACE,MAAA,OAAO,EAAE,KAAKL,oBADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAKE;AAAQ,MAAA,SAAS,EAAC,gBAAlB;AACA,MAAA,OAAO,EAAE,KAAKE,wBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,CADF,eASE;AAAK,MAAA,SAAS,EAAEvB,MAAM,CAACoC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,KAAK1B,KAAL,CAAWkB,QAAlC;AAA4C,MAAA,QAAQ,EAAC,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAI,MAAA,SAAS,EAAE5B,MAAM,CAACqC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK3B,KAAL,CAAWH,kBADd,CAFF,eAKE;AAAK,MAAA,SAAS,EAAEP,MAAM,CAACsC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAACrB,QAAAA,WAAW,EAAE;AAACsB,UAAAA,GAAG,EAAE;AAAN;AAAd,OAAd;AACE,MAAA,OAAO,EAAE,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,CADX;AAEE,MAAA,OAAO,MAFT;AAGE,MAAA,MAAM,EAAE,GAHV;AAIE,MAAA,IAAI,EAAE,KAAK7B,KAAL,CAAWG,kBAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAC,QAAZ;AACE,MAAA,QAAQ,EAAC,kBADX;AAEE,MAAA,KAAK,EAAC,MAFR;AAGE,MAAA,KAAK,EAAC,aAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF,CALF,CATF,eA2BE;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKH,KAAL,CAAWoB,QAAX,CAAoBhB,GAApB,CAAyB0B,GAAG,IAAI;AAC/B,0BAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEA,GAAvB;AAA4B,QAAA,OAAO,EAAEA,GAArC;AAA0C,QAAA,QAAQ,EAAE,KAAK9B,KAAL,CAAWe,YAAX,CAAwBe,GAAG,GAAC,CAA5B,EAA+BC,OAA/B,CAAuC,CAAvC,EAA0Cd,IAA9F;AAAoG,QAAA,QAAQ,EAAC,eAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFA,CADH,CA3BF,CADF;AAmCD;;AA3GiC;;AA8GpC,eAAe1B,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Chart, Line, Axis } from 'bizcharts';\nimport ForCastComponent from '../WeatherForeCast/ForeCastComponent/ForCastComponent'\nimport WeatherIcon from \"../WeatherIcon/WeatherIcon\";\nimport * as styles from './WeatherForm.module.css'\n\n\n\nclass WeatherForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: this.props.cityName,\n      wealtherInfo: this.props.wealtherInfo,\n      currentDate: this.props.currentDate,\n      currentHighestTemp: this.props.wealtherInfo[3].main.temp,\n      currentWeatherData: this.props.currentWeatherData,\n      iconType: this.props.iconType,\n      iconName: null,\n      pastDays: [-6,-5,-4,-3,-2,-1,0],\n      isMetric: this.props.isMetric\n    };\n    this.tempUnitHandler = this.tempUnitHandler.bind(this);\n    this.tempChartHandler = this.tempChartHandler.bind(this);\n    this.switchButtonToMetric = this.switchButtonToMetric.bind(this);\n    this.switchButtonToFahrenheit = this.switchButtonToFahrenheit.bind(this);\n  }\n  componentDidMount() {\n    console.log(\"Begining: \" +this.state.isMetric)\n  }\n\n  tempUnitHandler = (isMetric) => {\n    if (isMetric) {\n      this.setState({\n        currentHighestTemp:Math.round((this.state.currentHighestTemp - 32) * 5/9)\n    })} else {\n      this.setState({\n        currentHighestTemp:Math.round(this.state.currentHighestTemp * 9/5 + 32)})\n    };\n  }\n  tempChartHandler = (isMetric) => {\n    let newTempChart = [];\n    this.state.currentWeatherData.map(data => {\n      let temp = data.temperature\n      if (!isMetric) {\n        temp = Math.round((data.temperature * 9/5) + 32);\n      } else {\n        temp = Math.round((data.temperature - 32) * 5/9);  \n      }\n      newTempChart.push({\n        hour: data.hour,\n        city: data.city,\n        temperature: temp\n      })\n    })\n    this.setState({currentWeatherData: [...newTempChart]});\n  }\n\n  switchButtonToMetric = () => {\n    if (!this.state.isMetric) {\n      this.setState({\n        isMetric: true\n      })\n      this.tempChartHandler(this.state.isMetric);\n      this.tempUnitHandler(this.state.isMetric);\n      this.props.switchUnit(true);\n    }\n  }\n\n  switchButtonToFahrenheit = () => {\n    if (this.state.isMetric) {\n      this.setState({\n        isMetric: false\n      })\n      this.tempChartHandler(this.state.isMetric);\n      this.tempUnitHandler(this.state.isMetric);\n      this.props.switchUnit(false);\n    }\n  }\n  render() {\n    return (\n      <div className=\"container-fluid mx-1 h-75 w-100\">\n        <div className=\"container-fluid\">\n          <h1 className=\"text-left text-light\">{this.state.cityName}</h1>\n          <h2 className=\"text-left text-light\">{this.state.currentDate}</h2>\n          <button type=\"submit\" id=\"one\" className=\"btn float-left\" \n            onClick={this.switchButtonToMetric}>Fahrenheit</button>\n          <button className=\"btn float-left\"\n          onClick={this.switchButtonToFahrenheit}>Cesium</button>\n        </div>\n        <div className={styles.currentWeatherWrapper}>\n          <WeatherIcon iconType={this.state.iconType} iconSize=\"h-100\"/>\n          <h1 className={styles.currentTempature}>\n            {this.state.currentHighestTemp}\n          </h1>\n          <div className={styles.weatherTable}>\n            <Chart scale={{temperature: {min: 0}}} \n              padding={[30,20,50,40]} \n              autoFit \n              height={320} \n              data={this.state.currentWeatherData}>\n              <Line shape=\"smooth\" \n                position=\"hour*temperature\" \n                color=\"city\" \n                label=\"temperature\"/>\n            </Chart>\n          </div>\n        </div>\n        <div className=\"container-fluid w-100 pt-5 d-flex\">\n          {this.state.pastDays.map( day => {\n            return <ForCastComponent key={day} pastDay={day} iconType={this.state.wealtherInfo[day+6].weather[0].main} iconSize=\"card-img-top \"/>\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherForm;"]},"metadata":{},"sourceType":"module"}