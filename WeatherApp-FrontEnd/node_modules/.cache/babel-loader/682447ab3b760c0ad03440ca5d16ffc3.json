{"ast":null,"code":"var _jsxFileName = \"/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WealtherApp/WealtherApp.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport WeatherForm from '../WeatherForm/WeatherForm';\nimport SearchWeatherByCity from '../SearchWeatherByCity/SearchWeatherByCity';\nimport WeatherAppService from \"../../APIs/WeatherDataAPI/WeatherAppService\";\nimport HeaderComponent from '../HeaderComponent/HeaderComponent';\nimport SubHeaderComponent from '../HeaderComponent/SubHeaderComponent';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\nclass WealtherApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchClickedHandler = cityName => {\n      if (cityName !== this.state.cityName) {\n        this.accessWeatherDataHandler(cityName);\n      }\n    };\n\n    this.accessWeatherDataHandler = cityName => {\n      WeatherAppService.retrieveLocalWeather(cityName).then(response => {\n        let currentWeather = [];\n        let pastDateWeather = [];\n        response.data.list.map(day => {\n          currentWeather.push({\n            hour: moment(day.dt_txt).format('HH'),\n            city: \"temperature\",\n            temperature: day.main.temp\n          });\n        });\n\n        for (let i = 0; i <= 6; i++) {\n          response.data.list.map(day => {\n            pastDateWeather.push({\n              hour: moment(day.dt_txt).format('HH'),\n              city: \"temperature\",\n              temperature: Math.random() * (day.main.temp_max - day.main.temp_min) + day.main.temp_min\n            });\n            console.log(pastDateWeather[0]);\n          });\n        }\n\n        pastDateWeather.push(currentWeather);\n        this.setState({\n          currentWeatherData: [...currentWeather],\n          wealtherInfo: [...response.data.list],\n          receivedData: !this.state.receivedData,\n          cityName: cityName,\n          goBack: !this.state.goBack,\n          retrieveDataFailed: false,\n          iconType: response.data.list[0].weather[0].main\n        });\n      }).catch(error => {\n        this.setState({\n          errorMessage: \"Couldn't find the weather data for this city\",\n          retrieveDataFailed: true\n        });\n      });\n    };\n\n    this.clearClickedHandler = () => {\n      this.setState({\n        receivedData: !this.state.receivedData,\n        isMetric: false,\n        cityName: ''\n      });\n    };\n\n    this.switchUnitHandler = value => {\n      this.setState({\n        isMetric: value\n      });\n    };\n\n    this.state = {\n      cityName: '',\n      currentDate: moment(new Date()).format('YYYY-MM-DD'),\n      currentWeatherData: [],\n      receivedData: false,\n      wealtherInfo: [],\n      pastDayWeatherData: [],\n      retrieveDataFailed: false,\n      errorMessage: \"\",\n      isMetric: false\n    };\n    this.searchClickedHandler = this.searchClickedHandler.bind(this);\n    this.clearClickedHandler = this.clearClickedHandler.bind(this);\n    this.switchUnitHandler = this.switchUnitHandler.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid h-100 w-100 row align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid h-15 w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, this.state.receivedData && /*#__PURE__*/React.createElement(HeaderComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 12\n      }\n    }), !this.state.receivedData && /*#__PURE__*/React.createElement(SubHeaderComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 12\n      }\n    }), this.state.receivedData && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success btn-lg ml-3 d-flex float-left\",\n      onClick: this.clearClickedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 12\n      }\n    }, \"Clear\"), !this.state.receivedData && /*#__PURE__*/React.createElement(SearchWeatherByCity, {\n      searchClickedHandler: this.searchClickedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 12\n      }\n    })), this.state.receivedData && /*#__PURE__*/React.createElement(WeatherForm, {\n      cityName: this.state.cityName,\n      currentDate: this.state.currentDate,\n      currentWeatherData: this.state.currentWeatherData,\n      wealtherInfo: this.state.wealtherInfo,\n      iconType: this.state.iconType,\n      isMetric: this.state.isMetric,\n      switchUnit: this.switchUnitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 12\n      }\n    }), this.state.retrieveDataFailed && /*#__PURE__*/React.createElement(ErrorMessage, {\n      message: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\n\nexport default WealtherApp;","map":{"version":3,"sources":["/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WealtherApp/WealtherApp.js"],"names":["React","Component","moment","WeatherForm","SearchWeatherByCity","WeatherAppService","HeaderComponent","SubHeaderComponent","ErrorMessage","WealtherApp","constructor","props","searchClickedHandler","cityName","state","accessWeatherDataHandler","retrieveLocalWeather","then","response","currentWeather","pastDateWeather","data","list","map","day","push","hour","dt_txt","format","city","temperature","main","temp","i","Math","random","temp_max","temp_min","console","log","setState","currentWeatherData","wealtherInfo","receivedData","goBack","retrieveDataFailed","iconType","weather","catch","error","errorMessage","clearClickedHandler","isMetric","switchUnitHandler","value","currentDate","Date","pastDayWeatherData","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\n\nimport WeatherForm from '../WeatherForm/WeatherForm'\nimport SearchWeatherByCity from '../SearchWeatherByCity/SearchWeatherByCity'\nimport WeatherAppService from \"../../APIs/WeatherDataAPI/WeatherAppService\"\nimport HeaderComponent from '../HeaderComponent/HeaderComponent'\nimport SubHeaderComponent from '../HeaderComponent/SubHeaderComponent'\nimport ErrorMessage from '../ErrorMessage/ErrorMessage'\n\nclass WealtherApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: '',\n      currentDate: moment(new Date()).format('YYYY-MM-DD'),\n      currentWeatherData: [],\n      receivedData: false,\n      wealtherInfo: [],\n      pastDayWeatherData: [],\n      retrieveDataFailed: false,\n      errorMessage: \"\",\n      isMetric: false\n    };\n    this.searchClickedHandler = this.searchClickedHandler.bind(this);\n    this.clearClickedHandler = this.clearClickedHandler.bind(this);\n    this.switchUnitHandler = this.switchUnitHandler.bind(this);\n  }\n\n  searchClickedHandler = (cityName) => {\n    if (cityName !== this.state.cityName){\n      this.accessWeatherDataHandler(cityName);\n    }\n  }\n  accessWeatherDataHandler = (cityName) => {\n    WeatherAppService.retrieveLocalWeather(cityName)\n      .then(response => {\n        let currentWeather = [];\n        let pastDateWeather = [];\n        response.data.list.map( day => {\n          currentWeather.push({\n            hour: moment(day.dt_txt).format('HH'),\n            city: \"temperature\",\n            temperature: day.main.temp\n          })\n        });\n        for (let i = 0; i <= 6; i++) {\n          response.data.list.map( day => {\n            pastDateWeather.push({\n              hour: moment(day.dt_txt).format('HH'),\n              city: \"temperature\",\n              temperature: Math.random() * (day.main.temp_max - day.main.temp_min) + day.main.temp_min\n            })\n            console.log(pastDateWeather[0])\n          });\n        }\n        pastDateWeather.push(currentWeather);\n\n        this.setState({\n          currentWeatherData: [...currentWeather],\n          wealtherInfo: [...response.data.list],\n          receivedData: !this.state.receivedData,\n          cityName: cityName,\n          goBack: !this.state.goBack,\n          retrieveDataFailed: false,\n          iconType: response.data.list[0].weather[0].main\n        });\n      }).catch(error => {\n        this.setState({\n          errorMessage: \"Couldn't find the weather data for this city\",\n          retrieveDataFailed: true\n        })\n      });\n  }\n  clearClickedHandler = () => {\n    this.setState({\n      receivedData: !this.state.receivedData,\n      isMetric: false,\n      cityName: ''\n    })\n  }\n  switchUnitHandler = (value) => {\n    this.setState({\n      isMetric: value\n    })\n  }\n  render() {\n    return (\n      <div className=\"container-fluid h-100 w-100 row align-items-center\">\n        <div className=\"container-fluid h-15 w-100\">\n        {this.state.receivedData \n        && <HeaderComponent />}\n        {!this.state.receivedData \n        && <SubHeaderComponent />}\n        {this.state.receivedData \n        && <button className=\"btn btn-success btn-lg ml-3 d-flex float-left\" \n        onClick={this.clearClickedHandler}>Clear</button>}\n        {!this.state.receivedData \n        && <SearchWeatherByCity  searchClickedHandler={this.searchClickedHandler}/>}\n        </div>\n        {this.state.receivedData\n        && <WeatherForm \n          cityName={this.state.cityName}\n          currentDate={this.state.currentDate}\n          currentWeatherData={this.state.currentWeatherData}\n          wealtherInfo={this.state.wealtherInfo}\n          iconType={this.state.iconType}\n          isMetric={this.state.isMetric}\n          switchUnit={this.switchUnitHandler}\n        />}\n        {this.state.retrieveDataFailed \n        && <ErrorMessage message={this.state.errorMessage} />}\n      </div>\n    );\n  }\n}\n\nexport default WealtherApp;"]},"metadata":{},"sourceType":"module"}