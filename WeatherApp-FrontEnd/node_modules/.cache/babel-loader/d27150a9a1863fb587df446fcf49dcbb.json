{"ast":null,"code":"var _jsxFileName = \"/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/SearchWeatherByCity/SearchWeatherByCity.js\";\nimport React, { Component } from 'react';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport * as styles from './SearchWeatherByCity.module.css';\n/**\n * Search Component that promp uses to input location\n * @param  {String} this.state.cityName :Location Name given by users\n * @param  {[Object]} currentWeatherData :weather data currently displayed\n * @param  {[Object]} weatherDater :Weahter Data that fetched from API\n * @param  {String} error :Error Message\n * @param  {Boolean} goback :indicate to return to the searching page\n * @returns true\n */\n\nclass SearchWeatherByCity extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchCityHandler = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.validateInputHandler = () => {\n      if (this.state.cityName.length === 0) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.searchClickedHandler = () => {\n      if (!this.validateInputHandler()) {\n        this.setState({\n          error: \"The city name cannot be emtpy\"\n        });\n        return;\n      } else {\n        this.props.searchClickedHandler(this.state.cityName);\n      }\n    };\n\n    this.state = {\n      cityName: \"\",\n      currentWeatherData: [],\n      weatherDater: [],\n      error: null,\n      goback: true\n    };\n    this.searchCityHandler = this.searchCityHandler.bind(this);\n    this.searchClickedHandler = this.searchClickedHandler.bind(this);\n    this.validateInputHandler = this.validateInputHandler.bind(this);\n  }\n  /**\n  * Update the input value\n  */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"cityName\",\n      className: styles.search,\n      value: this.state.cityName,\n      placeholder: \"Enter a City Name:\",\n      onChange: this.searchCityHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: styles.button,\n      onClick: this.searchClickedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"Search\"), this.state.error != null && /*#__PURE__*/React.createElement(ErrorMessage, {\n      message: this.state.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\n\nexport default SearchWeatherByCity;","map":{"version":3,"sources":["/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/SearchWeatherByCity/SearchWeatherByCity.js"],"names":["React","Component","ErrorMessage","styles","SearchWeatherByCity","constructor","props","searchCityHandler","event","setState","target","name","value","validateInputHandler","state","cityName","length","searchClickedHandler","error","currentWeatherData","weatherDater","goback","bind","render","search","button"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,kCAAxB;AAEA;;;;;;;;;;AASA,MAAMC,mBAAN,SAAkCH,SAAlC,CAA4C;AAC1CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAgBnBC,iBAhBmB,GAgBEC,KAAD,IAAW;AAC7B,WAAKC,QAAL,CAAc;AACZ,SAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AADtB,OAAd;AAGD,KApBkB;;AAAA,SAwBnBC,oBAxBmB,GAwBI,MAAM;AAC3B,UAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,KAA+B,CAAnC,EAAsC;AACpC,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KA7BkB;;AAAA,SAiCnBC,oBAjCmB,GAiCI,MAAM;AAC3B,UAAK,CAAC,KAAKJ,oBAAL,EAAN,EAAoC;AAChC,aAAKJ,QAAL,CAAc;AAACS,UAAAA,KAAK,EAAE;AAAR,SAAd;AACA;AACH,OAHD,MAIK;AACH,aAAKZ,KAAL,CAAWW,oBAAX,CAAgC,KAAKH,KAAL,CAAWC,QAA3C;AACD;AACF,KAzCkB;;AAEjB,SAAKD,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXI,MAAAA,kBAAkB,EAAE,EAFT;AAGXC,MAAAA,YAAY,EAAC,EAHF;AAIXF,MAAAA,KAAK,EAAE,IAJI;AAKXG,MAAAA,MAAM,EAAE;AALG,KAAb;AAOA,SAAKd,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBe,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKL,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BK,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKT,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BS,IAA1B,CAA+B,IAA/B,CAA5B;AACD;AACD;;;;;AA6BAC,EAAAA,MAAM,GAAG;AACP,wBACE,uDACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,SAAS,EAAEpB,MAAM,CAACqB,MAFpB;AAGE,MAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC,QAHpB;AAIE,MAAA,WAAW,EAAC,oBAJd;AAKE,MAAA,QAAQ,EAAE,KAAKR,iBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAOE;AACE,MAAA,SAAS,EAAEJ,MAAM,CAACsB,MADpB;AAEE,MAAA,OAAO,EAAE,KAAKR,oBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,EAWG,KAAKH,KAAL,CAAWI,KAAX,IAAoB,IAApB,iBACE,oBAAC,YAAD;AAAc,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWI,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZL,CADF;AAgBD;;AA5DyC;;AA+D5C,eAAed,mBAAf","sourcesContent":["import React, { Component } from 'react'\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\nimport * as styles from './SearchWeatherByCity.module.css';\n\n/**\n * Search Component that promp uses to input location\n * @param  {String} this.state.cityName :Location Name given by users\n * @param  {[Object]} currentWeatherData :weather data currently displayed\n * @param  {[Object]} weatherDater :Weahter Data that fetched from API\n * @param  {String} error :Error Message\n * @param  {Boolean} goback :indicate to return to the searching page\n * @returns true\n */\nclass SearchWeatherByCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"\",\n      currentWeatherData: [],\n      weatherDater:[],\n      error: null,\n      goback: true\n    };\n    this.searchCityHandler = this.searchCityHandler.bind(this);\n    this.searchClickedHandler = this.searchClickedHandler.bind(this);\n    this.validateInputHandler = this.validateInputHandler.bind(this);\n  }\n  /**\n  * Update the input value\n  */\n  searchCityHandler = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n  /**\n  * Validate whether the user imput is empty.\n  */\n  validateInputHandler = () => {\n    if (this.state.cityName.length === 0) {\n      return false;\n    }\n    return true;\n  }\n  /**\n  * Update the location infomation\n  */\n  searchClickedHandler = () => {\n    if ( !this.validateInputHandler() ) {\n        this.setState({error: \"The city name cannot be emtpy\"});\n        return;\n    } \n    else {\n      this.props.searchClickedHandler(this.state.cityName);\n    }\n  }\n  render() {\n    return (\n      <>\n        <input type=\"text\" \n          name=\"cityName\" \n          className={styles.search}\n          value={this.state.cityName} \n          placeholder=\"Enter a City Name:\"\n          onChange={this.searchCityHandler} />\n        <button \n          className={styles.button} \n          onClick={this.searchClickedHandler}>Search\n        </button>\n        {this.state.error != null \n        && <ErrorMessage message={this.state.error}/>}\n      </>\n    );\n  }\n}\n\nexport default SearchWeatherByCity;"]},"metadata":{},"sourceType":"module"}