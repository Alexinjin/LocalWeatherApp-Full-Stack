{"ast":null,"code":"var _jsxFileName = \"/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/SearchWeatherByCity/SearchWeatherByCity.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport axios from 'axios';\nimport WeatherAppService from '../../APIs/WeatherDataAPI/WeatherAppService';\nimport * as styles from './SearchWeatherByCity.module.css';\n\nclass SearchWeatherByCity extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchCityHandler = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.validateInputHandler = () => {\n      if (this.state.cityName.length === 0) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.searchClickedHandler = () => {\n      if (!this.validateInputHandler()) {\n        this.setState({\n          error: \"The city name cannot be emtpy\"\n        });\n        return;\n      } else {\n        console.log(this.state.cityName); // WeatherAppService.retrieveLocalWeather(this.state.cityName)\n        // .then(response => {\n        //   let currentWeather = [];\n        //   response.data.list.map( day => {\n        //       currentWeather.push({\n        //         hour: moment(day.dt_txt).format('HH'),\n        //         city: this.state.cityName,\n        //         temperature: day.main.temp\n        //       })\n        //   })\n        // this.setState({currentWeatherData: [...currentWeather]});\n        // this.setState({weatherDater: [...response.data.list]});\n        // this.setState({error: null});\n        // }).then( () => {\n        //   this.props.searchClickedHandler(this.state.cityName, this.state.weatherDater, this.state.currentWeatherData);\n        // });\n\n        this.refreshWeatherData(this.state.cityName);\n      }\n    };\n\n    this.refreshWeatherData = cityName => {\n      WeatherAppService.retrieveLocalWeather(cityName).then(response => {\n        let currentWeather = [];\n        response.data.list.map(day => {\n          currentWeather.push({\n            hour: moment(day.dt_txt).format('HH'),\n            city: cityName,\n            temperature: day.main.temp\n          });\n          console.log(\"success\");\n        });\n        this.setState({\n          currentWeatherData: [...currentWeather]\n        });\n        this.setState({\n          weatherDater: [...response.data.list]\n        });\n        this.setState({\n          error: null\n        });\n      }).then(() => {\n        this.props.searchClickedHandler(cityName, this.state.weatherDater, this.state.currentWeatherData);\n      });\n    };\n\n    this.state = {\n      cityName: \"\",\n      currentWeatherData: [],\n      weatherDater: [],\n      error: null\n    };\n    this.searchCityHandler = this.searchCityHandler.bind(this);\n    this.searchClickedHandler = this.searchClickedHandler.bind(this);\n    this.validateInputHandler = this.validateInputHandler.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"cityName\",\n      className: styles.search,\n      value: this.state.cityName,\n      placeholder: \"Enter a City Name:\",\n      onChange: this.searchCityHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: styles.button,\n      onClick: this.searchClickedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, \"Search\"), this.state.error != null && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 12\n      }\n    }, this.state.error));\n  }\n\n}\n\nexport default SearchWeatherByCity;","map":{"version":3,"sources":["/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/SearchWeatherByCity/SearchWeatherByCity.js"],"names":["React","Component","moment","axios","WeatherAppService","styles","SearchWeatherByCity","constructor","props","searchCityHandler","event","setState","target","name","value","validateInputHandler","state","cityName","length","searchClickedHandler","error","console","log","refreshWeatherData","retrieveLocalWeather","then","response","currentWeather","data","list","map","day","push","hour","dt_txt","format","city","temperature","main","temp","currentWeatherData","weatherDater","bind","render","search","button"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport axios from 'axios';\nimport WeatherAppService from '../../APIs/WeatherDataAPI/WeatherAppService'\nimport * as styles from './SearchWeatherByCity.module.css';\n\nclass SearchWeatherByCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"\",\n      currentWeatherData: [],\n      weatherDater:[],\n      error: null\n    };\n    this.searchCityHandler = this.searchCityHandler.bind(this);\n    this.searchClickedHandler = this.searchClickedHandler.bind(this);\n    this.validateInputHandler = this.validateInputHandler.bind(this);\n  }\n\n  searchCityHandler = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  validateInputHandler = () => {\n    if (this.state.cityName.length === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  searchClickedHandler = () => {\n    if ( !this.validateInputHandler() ) {\n        this.setState({error: \"The city name cannot be emtpy\"});\n        return;\n    } \n    else {\n      console.log(this.state.cityName)\n      // WeatherAppService.retrieveLocalWeather(this.state.cityName)\n      // .then(response => {\n      //   let currentWeather = [];\n      //   response.data.list.map( day => {\n      //       currentWeather.push({\n      //         hour: moment(day.dt_txt).format('HH'),\n      //         city: this.state.cityName,\n      //         temperature: day.main.temp\n      //       })\n      //   })\n      // this.setState({currentWeatherData: [...currentWeather]});\n      // this.setState({weatherDater: [...response.data.list]});\n      // this.setState({error: null});\n      // }).then( () => {\n      //   this.props.searchClickedHandler(this.state.cityName, this.state.weatherDater, this.state.currentWeatherData);\n      // });\n      this.refreshWeatherData(this.state.cityName);\n    }\n  }\n\n  refreshWeatherData = (cityName) => {\n    WeatherAppService.retrieveLocalWeather(cityName)\n      .then(response => {\n        let currentWeather = [];\n        response.data.list.map( day => {\n            currentWeather.push({\n              hour: moment(day.dt_txt).format('HH'),\n              city: cityName,\n              temperature: day.main.temp\n            })\n            console.log(\"success\")\n        })\n      this.setState({currentWeatherData: [...currentWeather]});\n      this.setState({weatherDater: [...response.data.list]});\n      this.setState({error: null});\n      }).then( () => {\n        this.props.searchClickedHandler(cityName, this.state.weatherDater, this.state.currentWeatherData);\n      });\n  }\n\n  render() {\n    return (\n      <>\n        <input \n          type=\"text\" \n          name=\"cityName\" \n          className={styles.search}\n          value={this.state.cityName} \n          placeholder=\"Enter a City Name:\"\n          onChange={this.searchCityHandler} /> \n        <button \n          className={styles.button} \n          onClick={this.searchClickedHandler}>Search\n        </button>\n        {this.state.error != null \n        && <div className=\"alert alert-warning\">{this.state.error}</div>}\n      </>\n    );\n  }\n}\n\nexport default SearchWeatherByCity;"]},"metadata":{},"sourceType":"module"}