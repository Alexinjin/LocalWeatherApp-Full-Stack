{"ast":null,"code":"var _jsxFileName = \"/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WeatherForm/WeatherForm.js\";\nimport React, { Component } from 'react';\nimport { Chart, Line, Axis } from 'bizcharts';\nimport ForCastComponent from '../WeatherForeCast/ForeCastComponent/ForCastComponent';\nimport WeatherIcon from \"../WeatherIcon/WeatherIcon\";\nimport * as styles from './WeatherForm.module.css';\nimport { max } from 'moment';\n\nclass WeatherForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tempUnitHandler = isMetric => {\n      if (isMetric) {\n        this.setState({\n          currentHighestTemp: Math.round((this.state.currentHighestTemp - 32) * 5 / 9)\n        });\n      } else {\n        this.setState({\n          currentHighestTemp: Math.round(this.state.currentHighestTemp * 9 / 5 + 32)\n        });\n      }\n\n      ;\n    };\n\n    this.tempChartHandler = isMetric => {\n      let newTempChart = [];\n\n      if (isMetric === this.state.currentWeatherData[0].unit) {\n        return;\n      }\n\n      this.state.currentWeatherData.map(data => {\n        let temp = data.temperature;\n\n        if (!isMetric) {\n          temp = Math.round(data.temperature * 9 / 5 + 32);\n        } else {\n          temp = Math.round((data.temperature - 32) * 5 / 9);\n        }\n\n        newTempChart.push({\n          hour: data.hour,\n          city: data.city,\n          temperature: temp\n        });\n      });\n      this.setState({\n        currentWeatherData: [...newTempChart]\n      });\n    };\n\n    this.switchButtonToMetric = () => {\n      if (!this.state.isMetric) {\n        this.setState({\n          isMetric: true,\n          unitSymbol: '\\u00b0F'\n        });\n        this.tempChartHandler(this.state.isMetric);\n        this.tempUnitHandler(this.state.isMetric);\n        this.props.switchUnit(true);\n      }\n    };\n\n    this.switchButtonToFahrenheit = () => {\n      if (this.state.isMetric) {\n        this.setState({\n          isMetric: false,\n          unitSymbol: '\\u00b0C'\n        });\n        this.tempChartHandler(this.state.isMetric);\n        this.tempUnitHandler(this.state.isMetric);\n        this.props.switchUnit(false);\n      }\n    };\n\n    this.selectedDay = indexDay => {\n      let newSelected = indexDay + 7;\n\n      if (newSelected !== this.state.currentSelectedDay) {\n        this.setState({\n          currentSelectedDay: newSelected,\n          currentWeatherData: this.state.pastDayWeatherData[newSelected]\n        });\n      } else {\n        console.log(\" no change\");\n      }\n    };\n\n    this.state = {\n      cityName: this.props.cityName,\n      wealtherInfo: this.props.wealtherInfo,\n      currentDate: this.props.currentDate,\n      currentSelectedDay: this.props.currentSelectedDay,\n      currentHighestTemp: Math.round(this.props.wealtherInfo[3].main.temp),\n      currentWeatherData: this.props.pastDayWeatherData[this.props.currentSelectedDay],\n      iconType: this.props.iconType,\n      pastDays: [-7, -6, -5, -4, -3, -2, -1, 0],\n      pastDayWeatherData: this.props.pastDayWeatherData,\n      isMetric: this.props.isMetric,\n      unitSymbol: '\\u00b0C'\n    };\n    this.tempUnitHandler = this.tempUnitHandler.bind(this);\n    this.tempChartHandler = this.tempChartHandler.bind(this);\n    this.switchButtonToMetric = this.switchButtonToMetric.bind(this);\n    this.switchButtonToFahrenheit = this.switchButtonToFahrenheit.bind(this);\n    this.selectedDay = this.selectedDay.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.props.wealtherInfo);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid mx-1 h-75 w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-2 text-left text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, this.state.cityName), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"display-5 text-left text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, this.state.currentDate), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"one\",\n      className: \"btn btn-primary float-left\",\n      style: {\n        borderRadius: \"25px 0px 0px 25px\"\n      },\n      onClick: this.switchButtonToMetric,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, \"Fahrenheit\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-info float-left\",\n      style: {\n        borderRadius: \"0px 25px 25px 0px\"\n      },\n      onClick: this.switchButtonToFahrenheit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"Cesium\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.currentWeatherWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(WeatherIcon, {\n      iconType: this.state.iconType,\n      iconSize: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: styles.currentTempature,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, this.state.currentHighestTemp, this.state.unitSymbol), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.weatherTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      scale: {\n        temperature: {\n          min: 0\n        }\n      },\n      padding: [30, 20, 50, 40],\n      autoFit: true,\n      height: 320,\n      data: this.state.currentWeatherData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      shape: \"smooth\",\n      position: \"hour*temperature\",\n      color: \"temperature\",\n      label: \"temperature\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid w-100 ml-3 py-4 d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, this.state.pastDays.map(day => {\n      let maxTemp = this.state.wealtherInfo[day + 7].main.temp_max;\n      let iconType = this.state.wealtherInfo[day + 7].weather[0].main;\n\n      if (day == 0) {\n        maxTemp = this.state.currentHighestTemp;\n        iconType = this.state.iconType;\n      }\n\n      return /*#__PURE__*/React.createElement(ForCastComponent, {\n        key: day,\n        pastDay: day,\n        iconType: iconType,\n        iconSize: \"card-img-top\",\n        maxTemp: maxTemp,\n        unitSimbol: this.state.unitSymbol,\n        isMetric: this.state.isMetric,\n        selectedDay: this.selectedDay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      });\n    })));\n  }\n\n}\n\nexport default WeatherForm;","map":{"version":3,"sources":["/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WeatherForm/WeatherForm.js"],"names":["React","Component","Chart","Line","Axis","ForCastComponent","WeatherIcon","styles","max","WeatherForm","constructor","props","tempUnitHandler","isMetric","setState","currentHighestTemp","Math","round","state","tempChartHandler","newTempChart","currentWeatherData","unit","map","data","temp","temperature","push","hour","city","switchButtonToMetric","unitSymbol","switchUnit","switchButtonToFahrenheit","selectedDay","indexDay","newSelected","currentSelectedDay","pastDayWeatherData","console","log","cityName","wealtherInfo","currentDate","main","iconType","pastDays","bind","componentDidMount","render","borderRadius","currentWeatherWrapper","currentTempature","weatherTable","min","day","maxTemp","temp_max","weather"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Chart, Line, Axis } from 'bizcharts';\nimport ForCastComponent from '../WeatherForeCast/ForeCastComponent/ForCastComponent'\nimport WeatherIcon from \"../WeatherIcon/WeatherIcon\";\nimport * as styles from './WeatherForm.module.css'\nimport { max } from 'moment';\n\n\nclass WeatherForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: this.props.cityName,\n      wealtherInfo: this.props.wealtherInfo,\n      currentDate: this.props.currentDate,\n      currentSelectedDay: this.props.currentSelectedDay,\n      currentHighestTemp: Math.round(this.props.wealtherInfo[3].main.temp),\n      currentWeatherData: this.props.pastDayWeatherData[this.props.currentSelectedDay],\n      iconType: this.props.iconType,\n      pastDays: [-7, -6, -5, -4, -3, -2, -1, 0],\n      pastDayWeatherData:this.props.pastDayWeatherData,\n      isMetric: this.props.isMetric,\n      unitSymbol: '\\u00b0C'\n    };\n    this.tempUnitHandler = this.tempUnitHandler.bind(this);\n    this.tempChartHandler = this.tempChartHandler.bind(this);\n    this.switchButtonToMetric = this.switchButtonToMetric.bind(this);\n    this.switchButtonToFahrenheit = this.switchButtonToFahrenheit.bind(this);\n    this.selectedDay = this.selectedDay.bind(this);\n  }\n  componentDidMount() {\n    console.log(this.props.wealtherInfo)\n  }\n\n  tempUnitHandler = (isMetric) => {\n    if (isMetric) {\n      this.setState({\n        currentHighestTemp:Math.round((this.state.currentHighestTemp - 32) * 5/9)\n    })} else {\n      this.setState({\n        currentHighestTemp:Math.round(this.state.currentHighestTemp * 9/5 + 32)})\n    };\n  }\n  tempChartHandler = (isMetric) => {\n    let newTempChart = [];\n    if (isMetric === this.state.currentWeatherData[0].unit) {\n      return;\n    }\n    this.state.currentWeatherData.map(data => {\n      let temp = data.temperature\n      if (!isMetric) {\n        temp = Math.round((data.temperature * 9/5) + 32);\n      } else {\n        temp = Math.round((data.temperature - 32) * 5/9);  \n      }\n      newTempChart.push({\n        hour: data.hour,\n        city: data.city,\n        temperature: temp\n      })\n    })\n    this.setState({currentWeatherData: [...newTempChart]});\n  }\n\n  switchButtonToMetric = () => {\n    if (!this.state.isMetric) {\n      this.setState({\n        isMetric: true,\n        unitSymbol: '\\u00b0F'\n      })\n      this.tempChartHandler(this.state.isMetric);\n      this.tempUnitHandler(this.state.isMetric);\n      this.props.switchUnit(true);\n    }\n  }\n\n  switchButtonToFahrenheit = () => {\n    if (this.state.isMetric) {\n      this.setState({\n        isMetric: false,\n        unitSymbol: '\\u00b0C'\n      })\n      this.tempChartHandler(this.state.isMetric);\n      this.tempUnitHandler(this.state.isMetric);\n      this.props.switchUnit(false);\n    }\n  }\n  selectedDay = (indexDay) => {\n    let newSelected = indexDay + 7;\n    if (newSelected !== this.state.currentSelectedDay) {\n      this.setState({\n        currentSelectedDay: newSelected,\n        currentWeatherData: this.state.pastDayWeatherData[newSelected] \n      });\n    } else {\n      console.log(\" no change\")\n    }\n  }\n  render() {\n    return (\n      <div className=\"container-fluid mx-1 h-75 w-100\">\n        <div className=\"container-fluid\">\n          <h1 className=\"display-2 text-left text-light\">\n            {this.state.cityName}</h1>\n          <h2 className=\"display-5 text-left text-light\">\n            {this.state.currentDate}</h2>\n          <button id=\"one\" className=\"btn btn-primary float-left\" \n            style={{borderRadius:\"25px 0px 0px 25px\"}}\n            onClick={this.switchButtonToMetric}>Fahrenheit</button>\n          <button className=\"btn btn-info float-left\"\n            style={{borderRadius:\"0px 25px 25px 0px\"}}\n            onClick={this.switchButtonToFahrenheit}>Cesium</button>\n        </div>\n        <div className={styles.currentWeatherWrapper}>\n          <WeatherIcon iconType={this.state.iconType} iconSize=\"h-100\"/>\n          <h1 className={styles.currentTempature}>\n            {this.state.currentHighestTemp}{this.state.unitSymbol} \n          </h1>\n          <div className={styles.weatherTable}>\n            <Chart scale={{temperature: {min: 0}}} \n              padding={[30,20,50,40]} \n              autoFit \n              height={320} \n              data={this.state.currentWeatherData}>\n              <Line shape=\"smooth\" \n                position=\"hour*temperature\" \n                color=\"temperature\" \n                label=\"temperature\"/>\n            </Chart>\n          </div>\n        </div>\n        <div className=\"container-fluid w-100 ml-3 py-4 d-flex\">\n          {this.state.pastDays.map( day => {\n            let maxTemp = this.state.wealtherInfo[day+7].main.temp_max;\n            let iconType = this.state.wealtherInfo[day+7].weather[0].main;\n            if (day == 0) {\n              maxTemp = this.state.currentHighestTemp;\n              iconType = this.state.iconType;\n            }\n            return (\n            <ForCastComponent \n              key={day} \n              pastDay={day} \n              iconType={iconType} iconSize=\"card-img-top\" \n              maxTemp={maxTemp}\n              unitSimbol={this.state.unitSymbol}\n              isMetric={this.state.isMetric}\n              selectedDay={this.selectedDay}\n            />);\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherForm;"]},"metadata":{},"sourceType":"module"}