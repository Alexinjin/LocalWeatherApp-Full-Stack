{"ast":null,"code":"var _jsxFileName = \"/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WeatherForm/WeatherForm.js\";\nimport React, { Component } from 'react';\nimport { Chart, Line, Axis } from 'bizcharts';\nimport ForCastComponent from '../WeatherForeCast/ForeCastComponent/ForCastComponent';\nimport WeatherIcon from \"../WeatherIcon/WeatherIcon\";\nimport * as styles from './WeatherForm.module.css';\n\nclass WeatherForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tempUnitHandler = isMetric => {\n      if (isMetric) {\n        return this.state.currentHighestTemp;\n      }\n\n      return Math.round(this.state.currentHighestTemp * 9 / 5 + 32);\n    };\n\n    this.tempChartHandler = isMetric => {\n      let newTempChart = [];\n      this.state.currentWeatherData.map(data => {\n        if (!isMetric) {\n          newTempChart.push({\n            hour: data.hour,\n            city: data.city,\n            temperature: Math.round(data.temperature * 9 / 5 + 32)\n          });\n        } else {\n          newTempChart.push(data);\n        }\n      });\n      this.setState({\n        currentWeatherData: [...newTempChart]\n      });\n    };\n\n    this.state = {\n      cityName: this.props.cityName,\n      wealtherInfo: this.props.wealtherInfo,\n      currentDate: this.props.currentDate,\n      currentHighestTemp: this.props.wealtherInfo[3].main.temp,\n      currentWeatherData: this.props.currentWeatherData,\n      iconType: this.props.iconType,\n      iconName: null,\n      pastDays: [-6, -5, -4, -3, -2, -1, 0],\n      isMetric: this.props.isMetric\n    };\n    this.tempUnitHandler = this.tempUnitHandler.bind(this);\n    this.tempChartHandler = this.tempChartHandler.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"Begining\" + this.state.isMetric);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.isMetric !== prevProps.isMetric) // Check if it's a new \n      {\n        this.setState({\n          isMetric: this.props.isMetric\n        });\n      }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid mx-1 h-75 w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-left text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, this.state.cityName), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"text-left text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, this.state.currentDate)), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.currentWeatherWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(WeatherIcon, {\n      iconType: this.state.iconType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: styles.currentTempature,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, this.tempUnitHandler(this.state.isMetric)), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.weatherTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      scale: {\n        temperature: {\n          min: 0\n        }\n      },\n      padding: [30, 20, 50, 40],\n      autoFit: true,\n      height: 320,\n      data: this.tempChartHandler(this.state.isMetric),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      shape: \"smooth\",\n      position: \"hour*temperature\",\n      color: \"city\",\n      label: \"temperature\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid w-100 pt-5 d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, this.state.pastDays.map(day => {\n      return /*#__PURE__*/React.createElement(ForCastComponent, {\n        key: day,\n        pastDay: day,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 20\n        }\n      });\n    })));\n  }\n\n}\n\nexport default WeatherForm;","map":{"version":3,"sources":["/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WeatherForm/WeatherForm.js"],"names":["React","Component","Chart","Line","Axis","ForCastComponent","WeatherIcon","styles","WeatherForm","constructor","props","tempUnitHandler","isMetric","state","currentHighestTemp","Math","round","tempChartHandler","newTempChart","currentWeatherData","map","data","push","hour","city","temperature","setState","cityName","wealtherInfo","currentDate","main","temp","iconType","iconName","pastDays","bind","componentDidMount","console","log","componentDidUpdate","prevProps","render","currentWeatherWrapper","currentTempature","weatherTable","min","day"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Chart, Line, Axis } from 'bizcharts';\nimport ForCastComponent from '../WeatherForeCast/ForeCastComponent/ForCastComponent'\nimport WeatherIcon from \"../WeatherIcon/WeatherIcon\";\nimport * as styles from './WeatherForm.module.css'\n\n\n\nclass WeatherForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: this.props.cityName,\n      wealtherInfo: this.props.wealtherInfo,\n      currentDate: this.props.currentDate,\n      currentHighestTemp: this.props.wealtherInfo[3].main.temp,\n      currentWeatherData: this.props.currentWeatherData,\n      iconType: this.props.iconType,\n      iconName: null,\n      pastDays: [-6,-5,-4,-3,-2,-1,0],\n      isMetric: this.props.isMetric\n    };\n    this.tempUnitHandler = this.tempUnitHandler.bind(this);\n    this.tempChartHandler = this.tempChartHandler.bind(this);\n  }\n  componentDidMount() {\n    console.log(\"Begining\" +this.state.isMetric)\n  }\n\n  componentDidUpdate(prevProps) {\n    if( this.props.isMetric !== prevProps.isMetric) // Check if it's a new \n    {\n      this.setState({isMetric: this.props.isMetric});\n    }\n  } \n  tempUnitHandler = (isMetric) => {\n    if (isMetric) {\n      return this.state.currentHighestTemp;\n    }\n    return Math.round((this.state.currentHighestTemp * 9/5) + 32);\n  }\n  tempChartHandler = (isMetric) => {\n    let newTempChart = [];\n    this.state.currentWeatherData.map(data => {\n      if (!isMetric) {\n        newTempChart.push({\n          hour: data.hour,\n          city: data.city,\n          temperature: Math.round((data.temperature * 9/5) + 32)\n        })\n      } else {\n       newTempChart.push(data); \n      }\n    })\n    this.setState({currentWeatherData: [...newTempChart]});\n  }\n  render() {\n    return (\n      <div className=\"container-fluid mx-1 h-75 w-100\">\n        <div className=\"container-fluid\">\n          <h1 className=\"text-left text-light\">{this.state.cityName}</h1>\n          <h2 className=\"text-left text-light\">{this.state.currentDate}</h2>\n        </div>\n        <div className={styles.currentWeatherWrapper}>\n          <WeatherIcon iconType={this.state.iconType}/>\n          <h1 className={styles.currentTempature}>\n            {this.tempUnitHandler(this.state.isMetric)}\n          </h1>\n          <div className={styles.weatherTable}>\n            <Chart scale={{temperature: {min: 0}}} \n              padding={[30,20,50,40]} \n              autoFit \n              height={320} \n              data={this.tempChartHandler(this.state.isMetric)}>\n              <Line shape=\"smooth\" \n                position=\"hour*temperature\" \n                color=\"city\" \n                label=\"temperature\"/>\n            </Chart>\n          </div>\n        </div>\n        <div className=\"container-fluid w-100 pt-5 d-flex\">\n          {this.state.pastDays.map( day => {\n            return <ForCastComponent key={day} pastDay={day} />\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherForm;"]},"metadata":{},"sourceType":"module"}