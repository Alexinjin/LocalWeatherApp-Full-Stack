{"ast":null,"code":"var _jsxFileName = \"/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WeatherForeCast/ForeCastComponent/ForCastComponent.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport logo from \"../../../logo.svg\";\nimport WeatherIcon from '../../WeatherIcon/WeatherIcon';\n\nclass ForCastComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidUpdate = prevProps => {\n      if (prevProps.unitSimbol !== this.props.unitSimbol) {\n        this.setState({\n          unitSimbol: this.props.unitSimbol\n        });\n      }\n\n      if (prevProps.isMetric !== this.props.isMetric) {\n        this.setState({\n          isMetric: this.props.isMetric\n        });\n        this.tempSwitchHanlder(this.props.isMetric);\n      }\n    };\n\n    this.tempSwitchHanlder = isMetric => {\n      if (isMetric) {\n        this.setState({\n          maxTemp: Math.round(this.state.maxTemp * 9 / 5 + 32)\n        });\n      } else {\n        this.setState({\n          maxTemp: Math.round((this.state.maxTemp - 32) * 5 / 9)\n        });\n      }\n\n      ;\n    };\n\n    this.selectedHandler = () => {\n      console.log(this.state.pastDay);\n      this.props.selectedDay();\n    };\n\n    this.state = {\n      pastDay: this.props.pastDay,\n      iconType: this.props.iconType,\n      iconSize: this.props.iconSize,\n      maxTemp: this.props.maxTemp,\n      unitSimbol: this.props.unitSimbol,\n      isMetric: this.props.isMetric,\n      selectedDay: this.props.selectedDay\n    };\n    this.selectedHandler = this.selectedHandler.bind(this);\n    this.tempSwitchHanlder = this.tempSwitchHanlder.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn mx-1\",\n      style: {\n        width: \"12.5rem\"\n      },\n      onClick: this.selectedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(WeatherIcon, {\n      iconType: this.state.iconType,\n      iconSize: this.state.iconSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, moment().add(this.state.pastDay, 'days').format('dddd') + \", \" + moment().add(this.state.pastDay, 'days').format('MMM Do')), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, Math.round(this.state.maxTemp), this.state.unitSimbol));\n  }\n\n}\n\nexport default ForCastComponent;","map":{"version":3,"sources":["/Users/xinjin/Documents/Exercise/WeatherApp/weather-app/src/components/WeatherForeCast/ForeCastComponent/ForCastComponent.js"],"names":["React","Component","moment","WeatherIcon","ForCastComponent","constructor","props","componentDidUpdate","prevProps","unitSimbol","setState","isMetric","tempSwitchHanlder","maxTemp","Math","round","state","selectedHandler","console","log","pastDay","selectedDay","iconType","iconSize","bind","render","width","add","format"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport logo from '../../../logo.svg'\nimport WeatherIcon from '../../WeatherIcon/WeatherIcon'\nclass ForCastComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pastDay: this.props.pastDay,\n      iconType: this.props.iconType,\n      iconSize: this.props.iconSize,\n      maxTemp: this.props.maxTemp,\n      unitSimbol: this.props.unitSimbol,\n      isMetric: this.props.isMetric,\n      selectedDay: this.props.selectedDay\n    };\n    this.selectedHandler = this.selectedHandler.bind(this);\n    this.tempSwitchHanlder = this.tempSwitchHanlder.bind(this);\n  }\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.unitSimbol !== this.props.unitSimbol) {\n      this.setState({\n        unitSimbol: this.props.unitSimbol\n      })\n    }\n    if (prevProps.isMetric !== this.props.isMetric) {\n      this.setState({\n        isMetric: this.props.isMetric\n      })\n      this.tempSwitchHanlder(this.props.isMetric);\n    }\n  }\n  tempSwitchHanlder = (isMetric) => {\n    if (isMetric) {\n      this.setState({\n        maxTemp:Math.round(this.state.maxTemp * 9/5 + 32)\n    })} else {\n      this.setState({\n        maxTemp:Math.round((this.state.maxTemp - 32) * 5/9)\n      })\n    };\n  }\n  selectedHandler = () => {\n    console.log(this.state.pastDay)\n    this.props.selectedDay();\n  }\n  render() {\n    return (\n      <button className=\"btn mx-1\" \n        style={{width: \"12.5rem\"}} \n        onClick={this.selectedHandler}>\n          <WeatherIcon iconType={this.state.iconType} \n            iconSize={this.state.iconSize}/>\n          <p className=\"card-text\">\n            {moment().add(this.state.pastDay,'days').format('dddd') + \", \" +\n            moment().add(this.state.pastDay,'days').format('MMM Do')}\n          </p>\n          <p>{Math.round(this.state.maxTemp)}{this.state.unitSimbol}</p>\n      </button> \n    );\n  }\n}\n\nexport default ForCastComponent;"]},"metadata":{},"sourceType":"module"}